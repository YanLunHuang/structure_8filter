-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_array_array_ap_fixed_8u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    data_V_data_6_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_6_V_empty_n : IN STD_LOGIC;
    data_V_data_6_V_read : OUT STD_LOGIC;
    data_V_data_7_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_7_V_empty_n : IN STD_LOGIC;
    data_V_data_7_V_read : OUT STD_LOGIC;
    res_V_data_0_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_TVALID : OUT STD_LOGIC;
    res_V_data_0_V_TREADY : IN STD_LOGIC;
    res_V_data_1_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_TVALID : OUT STD_LOGIC;
    res_V_data_1_V_TREADY : IN STD_LOGIC;
    res_V_data_2_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_TVALID : OUT STD_LOGIC;
    res_V_data_2_V_TREADY : IN STD_LOGIC;
    res_V_data_3_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_TVALID : OUT STD_LOGIC;
    res_V_data_3_V_TREADY : IN STD_LOGIC;
    res_V_data_4_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_TVALID : OUT STD_LOGIC;
    res_V_data_4_V_TREADY : IN STD_LOGIC;
    res_V_data_5_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_TVALID : OUT STD_LOGIC;
    res_V_data_5_V_TREADY : IN STD_LOGIC;
    res_V_data_6_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_TVALID : OUT STD_LOGIC;
    res_V_data_6_V_TREADY : IN STD_LOGIC;
    res_V_data_7_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_TVALID : OUT STD_LOGIC;
    res_V_data_7_V_TREADY : IN STD_LOGIC );
end;


architecture behav of conv_2d_cl_array_array_ap_fixed_8u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_F : STD_LOGIC_VECTOR (10 downto 0) := "00000001111";
    constant ap_const_lv32_47F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001111111";
    constant ap_const_lv11_47F : STD_LOGIC_VECTOR (10 downto 0) := "10001111111";
    constant ap_const_lv1152_lc_2 : STD_LOGIC_VECTOR (1151 downto
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_in_V : STD_LOGIC_VECTOR (1151 downto
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (114 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal data_V_data_5_V_blk_n : STD_LOGIC;
    signal data_V_data_6_V_blk_n : STD_LOGIC;
    signal data_V_data_7_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal and_ln294_2_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_2_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_3_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_4_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_5_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_6_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_7_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_data_7_V_reg_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_6_V_reg_393 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_reg_406 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_reg_419 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_445 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_458 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_471 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_reg_484 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1188 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_res_V_data_0_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_1_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_2_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_3_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_4_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_5_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_6_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_V_data_7_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return : STD_LOGIC_VECTOR (1151 downto 0);
    signal call_ret_reg_1193 : STD_LOGIC_VECTOR (1151 downto 0);
    signal io_acc_block_signal_op51 : STD_LOGIC;
    signal icmp_ln294_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_1_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_1_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln294_2_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln74_reg_1214_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_fu_773_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln83_fu_881_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln83_reg_1223 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_0_V_reg_1240 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_1_V_reg_1245 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_2_V_reg_1250 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_3_V_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_4_V_reg_1260 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_5_V_reg_1265 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_6_V_reg_1270 : STD_LOGIC_VECTOR (15 downto 0);
    signal op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal op_V_assign_1_0_7_reg_1275 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_V_fu_976_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal acc_1_V_fu_981_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_991_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_5_V_fu_1001_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_V_fu_1006_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_V_fu_1011_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln315_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln315_reg_1320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_done : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_idle : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_ready : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_data_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_ready : STD_LOGIC;
    signal tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_ready : STD_LOGIC;
    signal tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_ready : STD_LOGIC;
    signal tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_ready : STD_LOGIC;
    signal tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_ready : STD_LOGIC;
    signal tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_ready : STD_LOGIC;
    signal tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_ready : STD_LOGIC;
    signal tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_ready : STD_LOGIC;
    signal op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_V_loc_0_reg_359 : STD_LOGIC_VECTOR (1151 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_i_reg_369 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln83_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln330_fu_1040_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln323_fu_1081_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln319_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln328_fu_1022_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_loc_0_fu_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal sX_loc_0_fu_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal pY_loc_0_fu_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal sY_loc_0_fu_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln325_fu_1099_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_717_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_733_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln294_2_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_3_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln294_1_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln294_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_779_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_30_fu_787_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln83_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln83_fu_808_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln83_2_fu_820_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_799_p4 : STD_LOGIC_VECTOR (1151 downto 0);
    signal sub_ln83_1_fu_814_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_fu_826_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_2_fu_841_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln83_3_fu_849_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_1_fu_834_p3 : STD_LOGIC_VECTOR (1151 downto 0);
    signal zext_ln83_2_fu_855_p1 : STD_LOGIC_VECTOR (1151 downto 0);
    signal zext_ln83_3_fu_859_p1 : STD_LOGIC_VECTOR (1151 downto 0);
    signal lshr_ln83_fu_863_p2 : STD_LOGIC_VECTOR (1151 downto 0);
    signal lshr_ln83_1_fu_869_p2 : STD_LOGIC_VECTOR (1151 downto 0);
    signal and_ln83_fu_875_p2 : STD_LOGIC_VECTOR (1151 downto 0);
    signal tmp_fu_961_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln330_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln325_fu_1093_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln277_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal res_V_data_0_V_TVALID_int : STD_LOGIC;
    signal res_V_data_0_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_0_V_U_vld_out : STD_LOGIC;
    signal res_V_data_1_V_TVALID_int : STD_LOGIC;
    signal res_V_data_1_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_1_V_U_vld_out : STD_LOGIC;
    signal res_V_data_2_V_TVALID_int : STD_LOGIC;
    signal res_V_data_2_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_2_V_U_vld_out : STD_LOGIC;
    signal res_V_data_3_V_TVALID_int : STD_LOGIC;
    signal res_V_data_3_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_3_V_U_vld_out : STD_LOGIC;
    signal res_V_data_4_V_TVALID_int : STD_LOGIC;
    signal res_V_data_4_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_4_V_U_vld_out : STD_LOGIC;
    signal res_V_data_5_V_TVALID_int : STD_LOGIC;
    signal res_V_data_5_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_5_V_U_vld_out : STD_LOGIC;
    signal res_V_data_6_V_TVALID_int : STD_LOGIC;
    signal res_V_data_6_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_6_V_U_vld_out : STD_LOGIC;
    signal res_V_data_7_V_TVALID_int : STD_LOGIC;
    signal res_V_data_7_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_7_V_U_vld_out : STD_LOGIC;
    signal ap_condition_383 : BOOLEAN;

    component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        output_V_read : IN STD_LOGIC_VECTOR (1151 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1151 downto 0) );
    end component;


    component product_dense_ap_fixed_ap_fixed_ap_fixed_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (15 downto 0);
        w_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (114 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    w2_V_U : component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V
    generic map (
        DataWidth => 115,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495 : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start,
        ap_done => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_done,
        ap_idle => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_idle,
        ap_ready => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_ready,
        data_V_read => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_data_V_read,
        output_V_read => layer_in_V_loc_0_reg_359,
        ap_return => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return);

    tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_w_V,
        ap_return => tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_return);

    tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_w_V,
        ap_return => tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_return);

    tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_w_V,
        ap_return => tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_return);

    tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_w_V,
        ap_return => tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_return);

    tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_w_V,
        ap_return => tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_return);

    tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_w_V,
        ap_return => tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_return);

    tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_w_V,
        ap_return => tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_return);

    op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_ready,
        a_V => trunc_ln83_reg_1223,
        w_V => op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_w_V,
        ap_return => op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_return);

    regslice_both_res_V_data_0_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_0_V_reg_471,
        vld_in => res_V_data_0_V_TVALID_int,
        ack_in => res_V_data_0_V_TREADY_int,
        data_out => res_V_data_0_V_TDATA,
        vld_out => regslice_both_res_V_data_0_V_U_vld_out,
        ack_out => res_V_data_0_V_TREADY,
        apdone_blk => regslice_both_res_V_data_0_V_U_apdone_blk);

    regslice_both_res_V_data_1_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_1_V_reg_458,
        vld_in => res_V_data_1_V_TVALID_int,
        ack_in => res_V_data_1_V_TREADY_int,
        data_out => res_V_data_1_V_TDATA,
        vld_out => regslice_both_res_V_data_1_V_U_vld_out,
        ack_out => res_V_data_1_V_TREADY,
        apdone_blk => regslice_both_res_V_data_1_V_U_apdone_blk);

    regslice_both_res_V_data_2_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_2_V_reg_445,
        vld_in => res_V_data_2_V_TVALID_int,
        ack_in => res_V_data_2_V_TREADY_int,
        data_out => res_V_data_2_V_TDATA,
        vld_out => regslice_both_res_V_data_2_V_U_vld_out,
        ack_out => res_V_data_2_V_TREADY,
        apdone_blk => regslice_both_res_V_data_2_V_U_apdone_blk);

    regslice_both_res_V_data_3_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_3_V_reg_432,
        vld_in => res_V_data_3_V_TVALID_int,
        ack_in => res_V_data_3_V_TREADY_int,
        data_out => res_V_data_3_V_TDATA,
        vld_out => regslice_both_res_V_data_3_V_U_vld_out,
        ack_out => res_V_data_3_V_TREADY,
        apdone_blk => regslice_both_res_V_data_3_V_U_apdone_blk);

    regslice_both_res_V_data_4_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_4_V_reg_419,
        vld_in => res_V_data_4_V_TVALID_int,
        ack_in => res_V_data_4_V_TREADY_int,
        data_out => res_V_data_4_V_TDATA,
        vld_out => regslice_both_res_V_data_4_V_U_vld_out,
        ack_out => res_V_data_4_V_TREADY,
        apdone_blk => regslice_both_res_V_data_4_V_U_apdone_blk);

    regslice_both_res_V_data_5_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_5_V_reg_406,
        vld_in => res_V_data_5_V_TVALID_int,
        ack_in => res_V_data_5_V_TREADY_int,
        data_out => res_V_data_5_V_TDATA,
        vld_out => regslice_both_res_V_data_5_V_U_vld_out,
        ack_out => res_V_data_5_V_TREADY,
        apdone_blk => regslice_both_res_V_data_5_V_U_apdone_blk);

    regslice_both_res_V_data_6_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_6_V_reg_393,
        vld_in => res_V_data_6_V_TVALID_int,
        ack_in => res_V_data_6_V_TREADY_int,
        data_out => res_V_data_6_V_TDATA,
        vld_out => regslice_both_res_V_data_6_V_U_vld_out,
        ack_out => res_V_data_6_V_TREADY,
        apdone_blk => regslice_both_res_V_data_6_V_U_apdone_blk);

    regslice_both_res_V_data_7_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_7_V_reg_380,
        vld_in => res_V_data_7_V_TVALID_int,
        ack_in => res_V_data_7_V_TREADY_int,
        data_out => res_V_data_7_V_TDATA,
        vld_out => regslice_both_res_V_data_7_V_U_vld_out,
        ack_out => res_V_data_7_V_TREADY,
        apdone_blk => regslice_both_res_V_data_7_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln277_fu_634_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_i_reg_369 <= i_reg_1188;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_369 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    in_index_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln74_fu_767_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_index_reg_484 <= ir_fu_773_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                in_index_reg_484 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    layer_in_V_loc_0_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                layer_in_V_loc_0_reg_359 <= call_ret_reg_1193;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                layer_in_V_loc_0_reg_359 <= layer_in_V;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                if ((icmp_ln315_fu_1016_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln315_fu_1016_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln328_fu_1022_p2;
                end if;
            end if; 
        end if;
    end process;

    pX_loc_0_fu_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln315_reg_1320 = ap_const_lv1_1))) then 
                pX_loc_0_fu_282 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_state8_io) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                pX_loc_0_fu_282 <= add_ln328_fu_1022_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pX_loc_0_fu_282 <= pX;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_383)) then
                if ((icmp_ln319_fu_1075_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln319_fu_1075_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln323_fu_1081_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_loc_0_fu_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln319_fu_1075_p2 = ap_const_lv1_1) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_1))) then 
                pY_loc_0_fu_290 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_state8_io) and (icmp_ln319_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_1))) then 
                pY_loc_0_fu_290 <= add_ln323_fu_1081_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pY_loc_0_fu_290 <= pY;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                if ((icmp_ln315_fu_1016_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln315_fu_1016_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln330_fu_1040_p3;
                end if;
            end if; 
        end if;
    end process;

    sX_loc_0_fu_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln315_reg_1320 = ap_const_lv1_1))) then 
                sX_loc_0_fu_286 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_state8_io) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                sX_loc_0_fu_286 <= select_ln330_fu_1040_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sX_loc_0_fu_286 <= sX;
            end if; 
        end if;
    end process;

    sY_loc_0_fu_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln319_fu_1075_p2 = ap_const_lv1_1) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_1))) then 
                sY_loc_0_fu_294 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_state8_io) and (icmp_ln319_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_1))) then 
                sY_loc_0_fu_294 <= select_ln325_fu_1099_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sY_loc_0_fu_294 <= sY;
            end if; 
        end if;
    end process;

    tmp_data_0_V_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_0_V_reg_471 <= acc_0_V_fu_976_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_0_V_reg_471 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_1_V_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_1_V_reg_458 <= acc_1_V_fu_981_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_1_V_reg_458 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_2_V_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_2_V_reg_445 <= acc_2_V_fu_986_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_2_V_reg_445 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_3_V_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_3_V_reg_432 <= acc_3_V_fu_991_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_3_V_reg_432 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_4_V_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_4_V_reg_419 <= acc_4_V_fu_996_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_4_V_reg_419 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_5_V_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_5_V_reg_406 <= acc_5_V_fu_1001_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_5_V_reg_406 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_6_V_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_6_V_reg_393 <= acc_6_V_fu_1006_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_6_V_reg_393 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_data_7_V_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_1214_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_data_7_V_reg_380 <= acc_7_V_fu_1011_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then 
                tmp_data_7_V_reg_380 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then
                and_ln294_2_reg_1210 <= and_ln294_2_fu_761_p2;
                call_ret_reg_1193 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return;
                icmp_ln294_1_reg_1205 <= icmp_ln294_1_fu_711_p2;
                icmp_ln294_reg_1200 <= icmp_ln294_fu_705_p2;
                layer_in_V <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_1188 <= i_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                icmp_ln315_reg_1320 <= icmp_ln315_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln74_reg_1214 <= icmp_ln74_fu_767_p2;
                icmp_ln74_reg_1214_pp0_iter1_reg <= icmp_ln74_reg_1214;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln74_reg_1214 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                op_V_assign_1_0_7_reg_1275 <= op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_return;
                tmpmult_0_V_reg_1240 <= tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_return;
                tmpmult_1_V_reg_1245 <= tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_return;
                tmpmult_2_V_reg_1250 <= tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_return;
                tmpmult_3_V_reg_1255 <= tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_return;
                tmpmult_4_V_reg_1260 <= tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_return;
                tmpmult_5_V_reg_1265 <= tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_return;
                tmpmult_6_V_reg_1270 <= tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln315_reg_1320 = ap_const_lv1_1))) then
                sY <= sY_loc_0_fu_294;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln74_fu_767_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln83_reg_1223 <= trunc_ln83_fu_881_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, regslice_both_res_V_data_0_V_U_apdone_blk, regslice_both_res_V_data_1_V_U_apdone_blk, regslice_both_res_V_data_2_V_U_apdone_blk, regslice_both_res_V_data_3_V_U_apdone_blk, regslice_both_res_V_data_4_V_U_apdone_blk, regslice_both_res_V_data_5_V_U_apdone_blk, regslice_both_res_V_data_6_V_U_apdone_blk, regslice_both_res_V_data_7_V_U_apdone_blk, io_acc_block_signal_op51, and_ln294_2_fu_761_p2, icmp_ln74_fu_767_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_state8_io, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, icmp_ln277_fu_634_p2, res_V_data_0_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln277_fu_634_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln277_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln294_2_fu_761_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_lv1_0 = and_ln294_2_fu_761_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln74_fu_767_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln74_fu_767_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    acc_0_V_fu_976_p2 <= std_logic_vector(unsigned(tmpmult_0_V_reg_1240) + unsigned(tmp_data_0_V_reg_471));
    acc_1_V_fu_981_p2 <= std_logic_vector(unsigned(tmpmult_1_V_reg_1245) + unsigned(tmp_data_1_V_reg_458));
    acc_2_V_fu_986_p2 <= std_logic_vector(unsigned(tmpmult_2_V_reg_1250) + unsigned(tmp_data_2_V_reg_445));
    acc_3_V_fu_991_p2 <= std_logic_vector(unsigned(tmpmult_3_V_reg_1255) + unsigned(tmp_data_3_V_reg_432));
    acc_4_V_fu_996_p2 <= std_logic_vector(unsigned(tmpmult_4_V_reg_1260) + unsigned(tmp_data_4_V_reg_419));
    acc_5_V_fu_1001_p2 <= std_logic_vector(unsigned(tmpmult_5_V_reg_1265) + unsigned(tmp_data_5_V_reg_406));
    acc_6_V_fu_1006_p2 <= std_logic_vector(unsigned(tmpmult_6_V_reg_1270) + unsigned(tmp_data_6_V_reg_393));
    acc_7_V_fu_1011_p2 <= std_logic_vector(unsigned(op_V_assign_1_0_7_reg_1275) + unsigned(tmp_data_7_V_reg_380));
    add_ln323_fu_1081_p2 <= std_logic_vector(unsigned(pY_loc_0_fu_290) + unsigned(ap_const_lv32_1));
    add_ln325_fu_1093_p2 <= std_logic_vector(unsigned(sY_loc_0_fu_294) + unsigned(ap_const_lv32_1));
    add_ln328_fu_1022_p2 <= std_logic_vector(unsigned(pX_loc_0_fu_282) + unsigned(ap_const_lv32_1));
    add_ln330_fu_1034_p2 <= std_logic_vector(unsigned(sX_loc_0_fu_286) + unsigned(ap_const_lv32_1));
    and_ln294_1_fu_755_p2 <= (icmp_ln294_3_fu_743_p2 and icmp_ln294_2_fu_727_p2);
    and_ln294_2_fu_761_p2 <= (and_ln294_fu_749_p2 and and_ln294_1_fu_755_p2);
    and_ln294_fu_749_p2 <= (icmp_ln294_fu_705_p2 and icmp_ln294_1_fu_711_p2);
    and_ln83_fu_875_p2 <= (lshr_ln83_fu_863_p2 and lshr_ln83_1_fu_869_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(regslice_both_res_V_data_0_V_U_apdone_blk, regslice_both_res_V_data_1_V_U_apdone_blk, regslice_both_res_V_data_2_V_U_apdone_blk, regslice_both_res_V_data_3_V_U_apdone_blk, regslice_both_res_V_data_4_V_U_apdone_blk, regslice_both_res_V_data_5_V_U_apdone_blk, regslice_both_res_V_data_6_V_U_apdone_blk, regslice_both_res_V_data_7_V_U_apdone_blk)
    begin
                ap_block_state2 <= ((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(and_ln294_2_reg_1210, res_V_data_0_V_TREADY_int)
    begin
                ap_block_state8_io <= ((res_V_data_0_V_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln294_2_reg_1210));
    end process;


    ap_condition_383_assign_proc : process(ap_CS_fsm_state8, icmp_ln315_fu_1016_p2, ap_block_state8_io)
    begin
                ap_condition_383 <= ((ap_const_boolean_0 = ap_block_state8_io) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln315_fu_1016_p2 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln74_fu_767_p2)
    begin
        if ((icmp_ln74_fu_767_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, regslice_both_res_V_data_0_V_U_apdone_blk, regslice_both_res_V_data_1_V_U_apdone_blk, regslice_both_res_V_data_2_V_U_apdone_blk, regslice_both_res_V_data_3_V_U_apdone_blk, regslice_both_res_V_data_4_V_U_apdone_blk, regslice_both_res_V_data_5_V_U_apdone_blk, regslice_both_res_V_data_6_V_U_apdone_blk, regslice_both_res_V_data_7_V_U_apdone_blk, icmp_ln277_fu_634_p2)
    begin
        if ((not(((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln277_fu_634_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_res_V_data_0_V_U_apdone_blk, regslice_both_res_V_data_1_V_U_apdone_blk, regslice_both_res_V_data_2_V_U_apdone_blk, regslice_both_res_V_data_3_V_U_apdone_blk, regslice_both_res_V_data_4_V_U_apdone_blk, regslice_both_res_V_data_5_V_U_apdone_blk, regslice_both_res_V_data_6_V_U_apdone_blk, regslice_both_res_V_data_7_V_U_apdone_blk, icmp_ln277_fu_634_p2)
    begin
        if ((not(((regslice_both_res_V_data_7_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_6_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_5_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_4_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_V_data_0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln277_fu_634_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start <= ap_const_logic_1;
        else 
            call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_data_V_read <= (((((((data_V_data_7_V_dout & data_V_data_6_V_dout) & data_V_data_5_V_dout) & data_V_data_4_V_dout) & data_V_data_3_V_dout) & data_V_data_2_V_dout) & data_V_data_1_V_dout) & data_V_data_0_V_dout);

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(data_V_data_4_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_5_V_blk_n_assign_proc : process(data_V_data_5_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_5_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_6_V_blk_n_assign_proc : process(data_V_data_6_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_6_V_blk_n <= data_V_data_6_V_empty_n;
        else 
            data_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_6_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_7_V_blk_n_assign_proc : process(data_V_data_7_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_V_data_7_V_blk_n <= data_V_data_7_V_empty_n;
        else 
            data_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_7_V_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op51 = ap_const_logic_1))) then 
            data_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_30_fu_787_p2 <= (tmp_8_fu_779_p3 or ap_const_lv11_F);
    i_fu_640_p2 <= std_logic_vector(unsigned(i_0_i_reg_369) + unsigned(ap_const_lv5_1));
    icmp_ln277_fu_634_p2 <= "1" when (i_0_i_reg_369 = ap_const_lv5_19) else "0";
    icmp_ln294_1_fu_711_p2 <= "1" when (sY_loc_0_fu_294 = ap_const_lv32_2) else "0";
    icmp_ln294_2_fu_727_p2 <= "1" when (signed(tmp_1_fu_717_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln294_3_fu_743_p2 <= "1" when (signed(tmp_10_fu_733_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln294_fu_705_p2 <= "1" when (sX_loc_0_fu_286 = ap_const_lv32_2) else "0";
    icmp_ln315_fu_1016_p2 <= "1" when (pX_loc_0_fu_282 = ap_const_lv32_4) else "0";
    icmp_ln319_fu_1075_p2 <= "1" when (pY_loc_0_fu_290 = ap_const_lv32_4) else "0";
    icmp_ln74_fu_767_p2 <= "1" when (in_index_reg_484 = ap_const_lv7_48) else "0";
    icmp_ln83_fu_793_p2 <= "1" when (unsigned(tmp_8_fu_779_p3) > unsigned(empty_30_fu_787_p2)) else "0";
    io_acc_block_signal_op51 <= (data_V_data_7_V_empty_n and data_V_data_6_V_empty_n and data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    ir_fu_773_p2 <= std_logic_vector(unsigned(in_index_reg_484) + unsigned(ap_const_lv7_1));
    lshr_ln83_1_fu_869_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1152_lc_2),to_integer(unsigned('0' & zext_ln83_3_fu_859_p1(31-1 downto 0)))));
    lshr_ln83_fu_863_p2 <= std_logic_vector(shift_right(unsigned(select_ln83_1_fu_834_p3),to_integer(unsigned('0' & zext_ln83_2_fu_855_p1(31-1 downto 0)))));
    op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_w_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_961_p4),16));

    res_V_data_0_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_0_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_0_V_TDATA_blk_n <= res_V_data_0_V_TREADY_int;
        else 
            res_V_data_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_TVALID <= regslice_both_res_V_data_0_V_U_vld_out;

    res_V_data_0_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_0_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_0_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_1_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_1_V_TDATA_blk_n <= res_V_data_1_V_TREADY_int;
        else 
            res_V_data_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_TVALID <= regslice_both_res_V_data_1_V_U_vld_out;

    res_V_data_1_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_1_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_1_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_2_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_2_V_TDATA_blk_n <= res_V_data_2_V_TREADY_int;
        else 
            res_V_data_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_TVALID <= regslice_both_res_V_data_2_V_U_vld_out;

    res_V_data_2_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_2_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_2_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_3_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_3_V_TDATA_blk_n <= res_V_data_3_V_TREADY_int;
        else 
            res_V_data_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_TVALID <= regslice_both_res_V_data_3_V_U_vld_out;

    res_V_data_3_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_3_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_3_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_4_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_4_V_TDATA_blk_n <= res_V_data_4_V_TREADY_int;
        else 
            res_V_data_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_TVALID <= regslice_both_res_V_data_4_V_U_vld_out;

    res_V_data_4_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_4_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_4_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_5_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_5_V_TDATA_blk_n <= res_V_data_5_V_TREADY_int;
        else 
            res_V_data_5_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_TVALID <= regslice_both_res_V_data_5_V_U_vld_out;

    res_V_data_5_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_5_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_5_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_6_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_6_V_TDATA_blk_n <= res_V_data_6_V_TREADY_int;
        else 
            res_V_data_6_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_TVALID <= regslice_both_res_V_data_6_V_U_vld_out;

    res_V_data_6_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_6_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_6_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, and_ln294_2_reg_1210, res_V_data_7_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln294_2_reg_1210)))) then 
            res_V_data_7_V_TDATA_blk_n <= res_V_data_7_V_TREADY_int;
        else 
            res_V_data_7_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_TVALID <= regslice_both_res_V_data_7_V_U_vld_out;

    res_V_data_7_V_TVALID_int_assign_proc : process(ap_CS_fsm_state7, res_V_data_0_V_TREADY_int)
    begin
        if (((res_V_data_0_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_data_7_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_7_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln325_fu_1099_p3 <= 
        ap_const_lv32_2 when (icmp_ln294_1_reg_1205(0) = '1') else 
        add_ln325_fu_1093_p2;
    select_ln330_fu_1040_p3 <= 
        ap_const_lv32_2 when (icmp_ln294_reg_1200(0) = '1') else 
        add_ln330_fu_1034_p2;
    select_ln83_1_fu_834_p3 <= 
        tmp_11_fu_799_p4 when (icmp_ln83_fu_793_p2(0) = '1') else 
        call_ret_reg_1193;
    select_ln83_2_fu_841_p3 <= 
        sub_ln83_1_fu_814_p2 when (icmp_ln83_fu_793_p2(0) = '1') else 
        tmp_8_fu_779_p3;
    select_ln83_fu_826_p3 <= 
        sub_ln83_fu_808_p2 when (icmp_ln83_fu_793_p2(0) = '1') else 
        sub_ln83_2_fu_820_p2;
    sub_ln83_1_fu_814_p2 <= std_logic_vector(signed(ap_const_lv11_47F) - signed(tmp_8_fu_779_p3));
    sub_ln83_2_fu_820_p2 <= std_logic_vector(unsigned(empty_30_fu_787_p2) - unsigned(tmp_8_fu_779_p3));
    sub_ln83_3_fu_849_p2 <= std_logic_vector(signed(ap_const_lv11_47F) - signed(select_ln83_fu_826_p3));
    sub_ln83_fu_808_p2 <= std_logic_vector(unsigned(tmp_8_fu_779_p3) - unsigned(empty_30_fu_787_p2));
    tmp_10_fu_733_p4 <= pX_loc_0_fu_282(31 downto 1);
    
    tmp_11_fu_799_p4_proc : process(call_ret_reg_1193)
    variable vlo_cpy : STD_LOGIC_VECTOR(1152+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1152+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    variable tmp_11_fu_799_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(11 - 1 downto 0) := ap_const_lv32_47F(11 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(11 - 1 downto 0) := ap_const_lv32_0(11 - 1 downto 0);
        v0_cpy := call_ret_reg_1193;
        if (vlo_cpy(11 - 1 downto 0) > vhi_cpy(11 - 1 downto 0)) then
            vhi_cpy(11-1 downto 0) := std_logic_vector(1152-1-unsigned(ap_const_lv32_0(11-1 downto 0)));
            vlo_cpy(11-1 downto 0) := std_logic_vector(1152-1-unsigned(ap_const_lv32_47F(11-1 downto 0)));
            for tmp_11_fu_799_p4_i in 0 to 1152-1 loop
                v0_cpy(tmp_11_fu_799_p4_i) := call_ret_reg_1193(1152-1-tmp_11_fu_799_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(11-1 downto 0)))));

        section := (others=>'0');
        section(11-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(11-1 downto 0)) - unsigned(vlo_cpy(11-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1152-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_799_p4 <= resvalue(1152-1 downto 0);
    end process;

    tmp_1_fu_717_p4 <= pY_loc_0_fu_290(31 downto 1);
    tmp_8_fu_779_p3 <= (in_index_reg_484 & ap_const_lv4_0);
    tmp_fu_961_p4 <= w2_V_q0(114 downto 112);
    tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_w_V <= w2_V_q0(16 - 1 downto 0);
    tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_w_V <= w2_V_q0(31 downto 16);
    tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_w_V <= w2_V_q0(47 downto 32);
    tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_w_V <= w2_V_q0(63 downto 48);
    tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_w_V <= w2_V_q0(79 downto 64);
    tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_w_V <= w2_V_q0(95 downto 80);
    tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_w_V <= w2_V_q0(111 downto 96);
    trunc_ln83_fu_881_p1 <= and_ln83_fu_875_p2(16 - 1 downto 0);
    w2_V_address0 <= zext_ln83_fu_885_p1(7 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln83_2_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_2_fu_841_p3),1152));
    zext_ln83_3_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln83_3_fu_849_p2),1152));
    zext_ln83_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index_reg_484),64));
end behav;
