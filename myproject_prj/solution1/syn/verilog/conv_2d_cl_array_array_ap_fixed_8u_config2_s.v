// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_array_array_ap_fixed_8u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_state8 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1151:0] layer_in_V;
reg   [31:0] sX;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
wire   [6:0] w2_V_address0;
reg    w2_V_ce0;
wire   [114:0] w2_V_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [0:0] and_ln294_2_reg_1210;
reg    res_V_data_1_V_TDATA_blk_n;
reg    res_V_data_2_V_TDATA_blk_n;
reg    res_V_data_3_V_TDATA_blk_n;
reg    res_V_data_4_V_TDATA_blk_n;
reg    res_V_data_5_V_TDATA_blk_n;
reg    res_V_data_6_V_TDATA_blk_n;
reg    res_V_data_7_V_TDATA_blk_n;
reg   [15:0] tmp_data_7_V_reg_380;
reg   [15:0] tmp_data_6_V_reg_393;
reg   [15:0] tmp_data_5_V_reg_406;
reg   [15:0] tmp_data_4_V_reg_419;
reg   [15:0] tmp_data_3_V_reg_432;
reg   [15:0] tmp_data_2_V_reg_445;
reg   [15:0] tmp_data_1_V_reg_458;
reg   [15:0] tmp_data_0_V_reg_471;
reg   [6:0] in_index_reg_484;
reg    ap_block_state1;
wire   [4:0] i_fu_640_p2;
reg   [4:0] i_reg_1188;
wire    ap_CS_fsm_state2;
wire    regslice_both_res_V_data_0_V_U_apdone_blk;
wire    regslice_both_res_V_data_1_V_U_apdone_blk;
wire    regslice_both_res_V_data_2_V_U_apdone_blk;
wire    regslice_both_res_V_data_3_V_U_apdone_blk;
wire    regslice_both_res_V_data_4_V_U_apdone_blk;
wire    regslice_both_res_V_data_5_V_U_apdone_blk;
wire    regslice_both_res_V_data_6_V_U_apdone_blk;
wire    regslice_both_res_V_data_7_V_U_apdone_blk;
reg    ap_block_state2;
wire   [1151:0] call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return;
reg   [1151:0] call_ret_reg_1193;
wire    io_acc_block_signal_op51;
wire   [0:0] icmp_ln294_fu_705_p2;
reg   [0:0] icmp_ln294_reg_1200;
wire   [0:0] icmp_ln294_1_fu_711_p2;
reg   [0:0] icmp_ln294_1_reg_1205;
wire   [0:0] and_ln294_2_fu_761_p2;
wire   [0:0] icmp_ln74_fu_767_p2;
reg   [0:0] icmp_ln74_reg_1214;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln74_reg_1214_pp0_iter1_reg;
wire   [6:0] ir_fu_773_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] trunc_ln83_fu_881_p1;
reg   [15:0] trunc_ln83_reg_1223;
wire   [15:0] tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_return;
reg   [15:0] tmpmult_0_V_reg_1240;
wire   [15:0] tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_return;
reg   [15:0] tmpmult_1_V_reg_1245;
wire   [15:0] tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_return;
reg   [15:0] tmpmult_2_V_reg_1250;
wire   [15:0] tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_return;
reg   [15:0] tmpmult_3_V_reg_1255;
wire   [15:0] tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_return;
reg   [15:0] tmpmult_4_V_reg_1260;
wire   [15:0] tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_return;
reg   [15:0] tmpmult_5_V_reg_1265;
wire   [15:0] tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_return;
reg   [15:0] tmpmult_6_V_reg_1270;
wire   [15:0] op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_return;
reg   [15:0] op_V_assign_1_0_7_reg_1275;
wire   [15:0] acc_0_V_fu_976_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] acc_1_V_fu_981_p2;
wire   [15:0] acc_2_V_fu_986_p2;
wire   [15:0] acc_3_V_fu_991_p2;
wire   [15:0] acc_4_V_fu_996_p2;
wire   [15:0] acc_5_V_fu_1001_p2;
wire   [15:0] acc_6_V_fu_1006_p2;
wire   [15:0] acc_7_V_fu_1011_p2;
wire   [0:0] icmp_ln315_fu_1016_p2;
reg   [0:0] icmp_ln315_reg_1320;
reg    ap_block_state8_io;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_done;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_idle;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_ready;
wire   [127:0] call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_data_V_read;
wire    tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_ready;
wire   [15:0] tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_w_V;
wire    tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_ready;
wire   [15:0] tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_w_V;
wire    tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_ready;
wire   [15:0] tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_w_V;
wire    tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_ready;
wire   [15:0] tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_w_V;
wire    tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_ready;
wire   [15:0] tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_w_V;
wire    tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_ready;
wire   [15:0] tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_w_V;
wire    tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_ready;
wire   [15:0] tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_w_V;
wire    op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_ready;
wire   [15:0] op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_w_V;
reg   [1151:0] layer_in_V_loc_0_reg_359;
wire    ap_CS_fsm_state9;
reg   [4:0] i_0_i_reg_369;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln83_fu_885_p1;
wire   [31:0] select_ln330_fu_1040_p3;
wire   [31:0] add_ln323_fu_1081_p2;
wire   [0:0] icmp_ln319_fu_1075_p2;
wire   [31:0] add_ln328_fu_1022_p2;
reg   [31:0] pX_loc_0_fu_282;
reg   [31:0] sX_loc_0_fu_286;
reg   [31:0] pY_loc_0_fu_290;
reg   [31:0] sY_loc_0_fu_294;
wire   [31:0] select_ln325_fu_1099_p3;
wire   [30:0] tmp_1_fu_717_p4;
wire   [30:0] tmp_10_fu_733_p4;
wire   [0:0] icmp_ln294_2_fu_727_p2;
wire   [0:0] icmp_ln294_3_fu_743_p2;
wire   [0:0] and_ln294_1_fu_755_p2;
wire   [0:0] and_ln294_fu_749_p2;
wire   [10:0] tmp_8_fu_779_p3;
wire   [10:0] empty_30_fu_787_p2;
wire   [0:0] icmp_ln83_fu_793_p2;
wire   [10:0] sub_ln83_fu_808_p2;
wire   [10:0] sub_ln83_2_fu_820_p2;
reg   [1151:0] tmp_11_fu_799_p4;
wire   [10:0] sub_ln83_1_fu_814_p2;
wire   [10:0] select_ln83_fu_826_p3;
wire   [10:0] select_ln83_2_fu_841_p3;
wire   [10:0] sub_ln83_3_fu_849_p2;
wire   [1151:0] select_ln83_1_fu_834_p3;
wire   [1151:0] zext_ln83_2_fu_855_p1;
wire   [1151:0] zext_ln83_3_fu_859_p1;
wire   [1151:0] lshr_ln83_fu_863_p2;
wire   [1151:0] lshr_ln83_1_fu_869_p2;
wire   [1151:0] and_ln83_fu_875_p2;
wire   [2:0] tmp_fu_961_p4;
wire   [31:0] add_ln330_fu_1034_p2;
wire   [31:0] add_ln325_fu_1093_p2;
wire   [0:0] icmp_ln277_fu_634_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    res_V_data_0_V_TVALID_int;
wire    res_V_data_0_V_TREADY_int;
wire    regslice_both_res_V_data_0_V_U_vld_out;
reg    res_V_data_1_V_TVALID_int;
wire    res_V_data_1_V_TREADY_int;
wire    regslice_both_res_V_data_1_V_U_vld_out;
reg    res_V_data_2_V_TVALID_int;
wire    res_V_data_2_V_TREADY_int;
wire    regslice_both_res_V_data_2_V_U_vld_out;
reg    res_V_data_3_V_TVALID_int;
wire    res_V_data_3_V_TREADY_int;
wire    regslice_both_res_V_data_3_V_U_vld_out;
reg    res_V_data_4_V_TVALID_int;
wire    res_V_data_4_V_TREADY_int;
wire    regslice_both_res_V_data_4_V_U_vld_out;
reg    res_V_data_5_V_TVALID_int;
wire    res_V_data_5_V_TREADY_int;
wire    regslice_both_res_V_data_5_V_U_vld_out;
reg    res_V_data_6_V_TVALID_int;
wire    res_V_data_6_V_TREADY_int;
wire    regslice_both_res_V_data_6_V_U_vld_out;
reg    res_V_data_7_V_TVALID_int;
wire    res_V_data_7_V_TREADY_int;
wire    regslice_both_res_V_data_7_V_U_vld_out;
reg    ap_condition_383;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 layer_in_V = 1152'd0;
#0 sX = 32'd0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V #(
    .DataWidth( 115 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .q0(w2_V_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start),
    .ap_done(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_done),
    .ap_idle(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_idle),
    .ap_ready(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_ready),
    .data_V_read(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_data_V_read),
    .output_V_read(layer_in_V_loc_0_reg_359),
    .ap_return(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534(
    .ap_ready(tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_w_V),
    .ap_return(tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540(
    .ap_ready(tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_w_V),
    .ap_return(tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546(
    .ap_ready(tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_w_V),
    .ap_return(tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552(
    .ap_ready(tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_w_V),
    .ap_return(tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558(
    .ap_ready(tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_w_V),
    .ap_return(tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564(
    .ap_ready(tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_w_V),
    .ap_return(tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570(
    .ap_ready(tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_w_V),
    .ap_return(tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576(
    .ap_ready(op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_ready),
    .a_V(trunc_ln83_reg_1223),
    .w_V(op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_w_V),
    .ap_return(op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_return)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_0_V_reg_471),
    .vld_in(res_V_data_0_V_TVALID_int),
    .ack_in(res_V_data_0_V_TREADY_int),
    .data_out(res_V_data_0_V_TDATA),
    .vld_out(regslice_both_res_V_data_0_V_U_vld_out),
    .ack_out(res_V_data_0_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_0_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_1_V_reg_458),
    .vld_in(res_V_data_1_V_TVALID_int),
    .ack_in(res_V_data_1_V_TREADY_int),
    .data_out(res_V_data_1_V_TDATA),
    .vld_out(regslice_both_res_V_data_1_V_U_vld_out),
    .ack_out(res_V_data_1_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_2_V_reg_445),
    .vld_in(res_V_data_2_V_TVALID_int),
    .ack_in(res_V_data_2_V_TREADY_int),
    .data_out(res_V_data_2_V_TDATA),
    .vld_out(regslice_both_res_V_data_2_V_U_vld_out),
    .ack_out(res_V_data_2_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_3_V_reg_432),
    .vld_in(res_V_data_3_V_TVALID_int),
    .ack_in(res_V_data_3_V_TREADY_int),
    .data_out(res_V_data_3_V_TDATA),
    .vld_out(regslice_both_res_V_data_3_V_U_vld_out),
    .ack_out(res_V_data_3_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_3_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_4_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_4_V_reg_419),
    .vld_in(res_V_data_4_V_TVALID_int),
    .ack_in(res_V_data_4_V_TREADY_int),
    .data_out(res_V_data_4_V_TDATA),
    .vld_out(regslice_both_res_V_data_4_V_U_vld_out),
    .ack_out(res_V_data_4_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_4_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_5_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_5_V_reg_406),
    .vld_in(res_V_data_5_V_TVALID_int),
    .ack_in(res_V_data_5_V_TREADY_int),
    .data_out(res_V_data_5_V_TDATA),
    .vld_out(regslice_both_res_V_data_5_V_U_vld_out),
    .ack_out(res_V_data_5_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_5_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_6_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_6_V_reg_393),
    .vld_in(res_V_data_6_V_TVALID_int),
    .ack_in(res_V_data_6_V_TREADY_int),
    .data_out(res_V_data_6_V_TDATA),
    .vld_out(regslice_both_res_V_data_6_V_U_vld_out),
    .ack_out(res_V_data_6_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_6_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_7_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_7_V_reg_380),
    .vld_in(res_V_data_7_V_TVALID_int),
    .ack_in(res_V_data_7_V_TREADY_int),
    .data_out(res_V_data_7_V_TDATA),
    .vld_out(regslice_both_res_V_data_7_V_U_vld_out),
    .ack_out(res_V_data_7_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_7_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln277_fu_634_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i_reg_369 <= i_reg_1188;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_369 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_fu_767_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_index_reg_484 <= ir_fu_773_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        in_index_reg_484 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer_in_V_loc_0_reg_359 <= call_ret_reg_1193;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer_in_V_loc_0_reg_359 <= layer_in_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
        if ((icmp_ln315_fu_1016_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln315_fu_1016_p2 == 1'd0)) begin
            pX <= add_ln328_fu_1022_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln315_reg_1320 == 1'd1))) begin
        pX_loc_0_fu_282 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln315_fu_1016_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        pX_loc_0_fu_282 <= add_ln328_fu_1022_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pX_loc_0_fu_282 <= pX;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_383)) begin
        if ((icmp_ln319_fu_1075_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln319_fu_1075_p2 == 1'd0)) begin
            pY <= add_ln323_fu_1081_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln319_fu_1075_p2 == 1'd1) & (icmp_ln315_fu_1016_p2 == 1'd1))) begin
        pY_loc_0_fu_290 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln319_fu_1075_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln315_fu_1016_p2 == 1'd1))) begin
        pY_loc_0_fu_290 <= add_ln323_fu_1081_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pY_loc_0_fu_290 <= pY;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
        if ((icmp_ln315_fu_1016_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln315_fu_1016_p2 == 1'd0)) begin
            sX <= select_ln330_fu_1040_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln315_reg_1320 == 1'd1))) begin
        sX_loc_0_fu_286 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln315_fu_1016_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sX_loc_0_fu_286 <= select_ln330_fu_1040_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sX_loc_0_fu_286 <= sX;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln319_fu_1075_p2 == 1'd1) & (icmp_ln315_fu_1016_p2 == 1'd1))) begin
        sY_loc_0_fu_294 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln319_fu_1075_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln315_fu_1016_p2 == 1'd1))) begin
        sY_loc_0_fu_294 <= select_ln325_fu_1099_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sY_loc_0_fu_294 <= sY;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_0_V_reg_471 <= acc_0_V_fu_976_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_0_V_reg_471 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_1_V_reg_458 <= acc_1_V_fu_981_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_1_V_reg_458 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_2_V_reg_445 <= acc_2_V_fu_986_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_2_V_reg_445 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_3_V_reg_432 <= acc_3_V_fu_991_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_3_V_reg_432 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_4_V_reg_419 <= acc_4_V_fu_996_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_4_V_reg_419 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_5_V_reg_406 <= acc_5_V_fu_1001_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_5_V_reg_406 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_6_V_reg_393 <= acc_6_V_fu_1006_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_6_V_reg_393 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_7_V_reg_380 <= acc_7_V_fu_1011_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
        tmp_data_7_V_reg_380 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        and_ln294_2_reg_1210 <= and_ln294_2_fu_761_p2;
        call_ret_reg_1193 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return;
        icmp_ln294_1_reg_1205 <= icmp_ln294_1_fu_711_p2;
        icmp_ln294_reg_1200 <= icmp_ln294_fu_705_p2;
        layer_in_V <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_1188 <= i_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
        icmp_ln315_reg_1320 <= icmp_ln315_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln74_reg_1214 <= icmp_ln74_fu_767_p2;
        icmp_ln74_reg_1214_pp0_iter1_reg <= icmp_ln74_reg_1214;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_reg_1214 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_assign_1_0_7_reg_1275 <= op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_ap_return;
        tmpmult_0_V_reg_1240 <= tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_ap_return;
        tmpmult_1_V_reg_1245 <= tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_ap_return;
        tmpmult_2_V_reg_1250 <= tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_ap_return;
        tmpmult_3_V_reg_1255 <= tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_ap_return;
        tmpmult_4_V_reg_1260 <= tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_ap_return;
        tmpmult_5_V_reg_1265 <= tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_ap_return;
        tmpmult_6_V_reg_1270 <= tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln315_reg_1320 == 1'd1))) begin
        sY <= sY_loc_0_fu_294;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_fu_767_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln83_reg_1223 <= trunc_ln83_fu_881_p1;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_767_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln277_fu_634_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln277_fu_634_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start = 1'b1;
    end else begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY_int;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_0_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_0_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY_int;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_1_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_1_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY_int;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_2_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_2_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY_int;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_3_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_3_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY_int;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_4_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_4_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY_int;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_5_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_5_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY_int;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_6_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_6_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln294_2_reg_1210)))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY_int;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_data_7_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_7_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_V_ce0 = 1'b1;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln277_fu_634_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1)) & (icmp_ln277_fu_634_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1) & (1'd1 == and_ln294_2_fu_761_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'd0 == and_ln294_2_fu_761_p2) & (1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op51 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln74_fu_767_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln74_fu_767_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((res_V_data_0_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_976_p2 = (tmpmult_0_V_reg_1240 + tmp_data_0_V_reg_471);

assign acc_1_V_fu_981_p2 = (tmpmult_1_V_reg_1245 + tmp_data_1_V_reg_458);

assign acc_2_V_fu_986_p2 = (tmpmult_2_V_reg_1250 + tmp_data_2_V_reg_445);

assign acc_3_V_fu_991_p2 = (tmpmult_3_V_reg_1255 + tmp_data_3_V_reg_432);

assign acc_4_V_fu_996_p2 = (tmpmult_4_V_reg_1260 + tmp_data_4_V_reg_419);

assign acc_5_V_fu_1001_p2 = (tmpmult_5_V_reg_1265 + tmp_data_5_V_reg_406);

assign acc_6_V_fu_1006_p2 = (tmpmult_6_V_reg_1270 + tmp_data_6_V_reg_393);

assign acc_7_V_fu_1011_p2 = (op_V_assign_1_0_7_reg_1275 + tmp_data_7_V_reg_380);

assign add_ln323_fu_1081_p2 = (pY_loc_0_fu_290 + 32'd1);

assign add_ln325_fu_1093_p2 = (sY_loc_0_fu_294 + 32'd1);

assign add_ln328_fu_1022_p2 = (pX_loc_0_fu_282 + 32'd1);

assign add_ln330_fu_1034_p2 = (sX_loc_0_fu_286 + 32'd1);

assign and_ln294_1_fu_755_p2 = (icmp_ln294_3_fu_743_p2 & icmp_ln294_2_fu_727_p2);

assign and_ln294_2_fu_761_p2 = (and_ln294_fu_749_p2 & and_ln294_1_fu_755_p2);

assign and_ln294_fu_749_p2 = (icmp_ln294_fu_705_p2 & icmp_ln294_1_fu_711_p2);

assign and_ln83_fu_875_p2 = (lshr_ln83_fu_863_p2 & lshr_ln83_1_fu_869_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((res_V_data_0_V_TREADY_int == 1'b0) & (1'd1 == and_ln294_2_reg_1210));
end

always @ (*) begin
    ap_condition_383 = ((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln315_fu_1016_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_495_data_V_read = {{{{{{{{data_V_data_7_V_dout}, {data_V_data_6_V_dout}}, {data_V_data_5_V_dout}}, {data_V_data_4_V_dout}}, {data_V_data_3_V_dout}}, {data_V_data_2_V_dout}}, {data_V_data_1_V_dout}}, {data_V_data_0_V_dout}};

assign empty_30_fu_787_p2 = (tmp_8_fu_779_p3 | 11'd15);

assign i_fu_640_p2 = (i_0_i_reg_369 + 5'd1);

assign icmp_ln277_fu_634_p2 = ((i_0_i_reg_369 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln294_1_fu_711_p2 = ((sY_loc_0_fu_294 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln294_2_fu_727_p2 = (($signed(tmp_1_fu_717_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln294_3_fu_743_p2 = (($signed(tmp_10_fu_733_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln294_fu_705_p2 = ((sX_loc_0_fu_286 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln315_fu_1016_p2 = ((pX_loc_0_fu_282 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln319_fu_1075_p2 = ((pY_loc_0_fu_290 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_767_p2 = ((in_index_reg_484 == 7'd72) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_793_p2 = ((tmp_8_fu_779_p3 > empty_30_fu_787_p2) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op51 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign ir_fu_773_p2 = (in_index_reg_484 + 7'd1);

assign lshr_ln83_1_fu_869_p2 = 1152'd61172327492847069472032393719205726809135813743440799050195397570919697796091958321786863938157971792315844506873509046544459008355036150650333616890210625686064472971480622053109783197015954399612052812141827922088117778074833698589048132156300022844899841969874763871624802603515651998113045708569927237462546233168834543264678118409417047146495 >> zext_ln83_3_fu_859_p1;

assign lshr_ln83_fu_863_p2 = select_ln83_1_fu_834_p3 >> zext_ln83_2_fu_855_p1;

assign op_V_assign_1_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_576_w_V = tmp_fu_961_p4;

assign res_V_data_0_V_TVALID = regslice_both_res_V_data_0_V_U_vld_out;

assign res_V_data_1_V_TVALID = regslice_both_res_V_data_1_V_U_vld_out;

assign res_V_data_2_V_TVALID = regslice_both_res_V_data_2_V_U_vld_out;

assign res_V_data_3_V_TVALID = regslice_both_res_V_data_3_V_U_vld_out;

assign res_V_data_4_V_TVALID = regslice_both_res_V_data_4_V_U_vld_out;

assign res_V_data_5_V_TVALID = regslice_both_res_V_data_5_V_U_vld_out;

assign res_V_data_6_V_TVALID = regslice_both_res_V_data_6_V_U_vld_out;

assign res_V_data_7_V_TVALID = regslice_both_res_V_data_7_V_U_vld_out;

assign select_ln325_fu_1099_p3 = ((icmp_ln294_1_reg_1205[0:0] === 1'b1) ? 32'd2 : add_ln325_fu_1093_p2);

assign select_ln330_fu_1040_p3 = ((icmp_ln294_reg_1200[0:0] === 1'b1) ? 32'd2 : add_ln330_fu_1034_p2);

assign select_ln83_1_fu_834_p3 = ((icmp_ln83_fu_793_p2[0:0] === 1'b1) ? tmp_11_fu_799_p4 : call_ret_reg_1193);

assign select_ln83_2_fu_841_p3 = ((icmp_ln83_fu_793_p2[0:0] === 1'b1) ? sub_ln83_1_fu_814_p2 : tmp_8_fu_779_p3);

assign select_ln83_fu_826_p3 = ((icmp_ln83_fu_793_p2[0:0] === 1'b1) ? sub_ln83_fu_808_p2 : sub_ln83_2_fu_820_p2);

assign sub_ln83_1_fu_814_p2 = ($signed(11'd1151) - $signed(tmp_8_fu_779_p3));

assign sub_ln83_2_fu_820_p2 = (empty_30_fu_787_p2 - tmp_8_fu_779_p3);

assign sub_ln83_3_fu_849_p2 = ($signed(11'd1151) - $signed(select_ln83_fu_826_p3));

assign sub_ln83_fu_808_p2 = (tmp_8_fu_779_p3 - empty_30_fu_787_p2);

assign tmp_10_fu_733_p4 = {{pX_loc_0_fu_282[31:1]}};

integer ap_tvar_int_0;

always @ (call_ret_reg_1193) begin
    for (ap_tvar_int_0 = 1152 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1151 - 0) begin
            tmp_11_fu_799_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_11_fu_799_p4[ap_tvar_int_0] = call_ret_reg_1193[1151 - ap_tvar_int_0];
        end
    end
end

assign tmp_1_fu_717_p4 = {{pY_loc_0_fu_290[31:1]}};

assign tmp_8_fu_779_p3 = {{in_index_reg_484}, {4'd0}};

assign tmp_fu_961_p4 = {{w2_V_q0[114:112]}};

assign tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_534_w_V = w2_V_q0[15:0];

assign tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_540_w_V = {{w2_V_q0[31:16]}};

assign tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_546_w_V = {{w2_V_q0[47:32]}};

assign tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_552_w_V = {{w2_V_q0[63:48]}};

assign tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_558_w_V = {{w2_V_q0[79:64]}};

assign tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_564_w_V = {{w2_V_q0[95:80]}};

assign tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_570_w_V = {{w2_V_q0[111:96]}};

assign trunc_ln83_fu_881_p1 = and_ln83_fu_875_p2[15:0];

assign w2_V_address0 = zext_ln83_fu_885_p1;

assign zext_ln83_2_fu_855_p1 = select_ln83_2_fu_841_p3;

assign zext_ln83_3_fu_859_p1 = sub_ln83_3_fu_849_p2;

assign zext_ln83_fu_885_p1 = in_index_reg_484;

endmodule //conv_2d_cl_array_array_ap_fixed_8u_config2_s
